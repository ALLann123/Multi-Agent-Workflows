import requests
import re

def get_cve_info(query):
    print(f"[+] Searching CVEs for: {query}")
    nvd_url = f"https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&query={query}&search_type=all"

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }

    response = requests.get(nvd_url, headers=headers)
    if response.status_code != 200:
        print(f"[-] Failed to fetch NVD data. Status code: {response.status_code}")
        return

    html_content = response.text
    cve_ids = re.findall(r'href="/vuln/detail/CVE-(\d{4}-\d+)"', html_content)

    if not cve_ids:
        print("[-] No CVEs found.")
        return

    cve_ids = sorted(set(cve_ids))
    print(f"\n[+] Found {len(cve_ids)} CVEs for '{query}':")

    for cve_id in cve_ids[:5]:  # limit to first 5 results
        print(f"\n--- CVE-{cve_id} ---")
        cve_url = f"https://nvd.nist.gov/vuln/detail/CVE-{cve_id}"
        cve_response = requests.get(cve_url, headers=headers)
        if cve_response.status_code == 200:
            cve_html = cve_response.text
            match = re.search(r'<p data-testid="vuln-description">(.*?)</p>', cve_html, re.DOTALL)
            if match:
                summary = match.group(1).strip().replace("\n", " ")
                print("Summary:", summary)
            else:
                print("Summary not found.")
        else:
            print(f"Failed to fetch details for CVE-{cve_id}")

# Example usage
if __name__ == "__main__":
    get_cve_info("openssl")



"""
[+] Searching CVEs for: openssl

[+] Found 20 CVEs for 'openssl':

--- CVE-2023-24010 ---
Summary: An attacker can arbitrarily craft malicious DDS Participants (or ROS 2 Nodes) with valid certificates to compromise and get full control of the attacked secure DDS databus system by exploiting vulnerable attributes in the configuration of PKCS#7 certificate’s validation. This is caused by a non-compliant implementation of permission document verification used by some DDS vendors. Specifically, an improper use of the OpenSSL PKCS7_verify function used to validate S/MIME signatures.

--- CVE-2023-24011 ---
Summary: An attacker can arbitrarily craft malicious DDS Participants (or ROS 2 Nodes) with valid certificates to compromise and get full control of the attacked secure DDS databus system by exploiting vulnerable attributes in the configuration of PKCS#7 certificate’s validation. This is caused by a non-compliant implementation of permission document verification used by some DDS vendors. Specifically, an improper use of the OpenSSL PKCS7_verify function used to validate S/MIME signatures.

--- CVE-2023-24012 ---
Summary: An attacker can arbitrarily craft malicious DDS Participants (or ROS 2 Nodes) with valid certificates to compromise and get full control of the attacked secure DDS databus system by exploiting vulnerable attributes in the configuration of PKCS#7 certificate’s validation. This is caused by a non-compliant implementation of permission document verification used by some DDS vendors. Specifically, an improper use of the OpenSSL PKCS7_verify function used to validate S/MIME signatures.

"""